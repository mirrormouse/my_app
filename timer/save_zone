
from django.shortcuts import render
from django.shortcuts import redirect
from django.http import HttpResponse
from django.core.paginator import Paginator
from .forms import TimerCreateForm, SetForm, TitleForm, UserCreateForm, LoginForm
from django import forms
from .models import Timer
from django.contrib.auth.models import User
from django.contrib.auth import login, authenticate,logout
from django.views.generic import CreateView
from django.views import View
from django.contrib.auth.decorators import login_required
from django.urls import reverse
from urllib.parse import urlencode

@login_required(login_url='/timer/login')
def index_redirect(request):
    return redirect(to='/timer/1')

@login_required(login_url='/timer/login')
def index(request,num=1):
    TimerCreateFormSet=forms.modelformset_factory(
        Timer,
        form=TimerCreateForm,
        extra=1,
    )
    params={
        'TitleForm':TitleForm(initial={'title':'Title','hour':'時','min':'分','sec':'秒','sound':'Sound'}),
        'TimerForm':TimerCreateFormSet(
            initial=[{'title':'Timer','hour':'00','min':'00','sec':'00'}],
            ),
        'num':num,
        'plus':num+1,
        'minus':num-1,
        #'args':{'title':'Timer','hour':1,'min':0,'sec':0},
    }
    if (request.method=='POST'):
        if 'clear' in request.POST:
            pass
        elif 'save' in request.POST:
            modelformset=forms.modelformset_factory(
                Timer,
                form=TimerCreateForm,
                extra=int(num),
            )
            formset=modelformset(request.POST)
            formset.save()
        else:
            modelformset=forms.modelformset_factory(
                Timer,
                form=TimerCreateForm,
                extra=int(num),
            )
            formset_request=modelformset(request.POST)
            #print(formset_request.errors)
            if formset_request.is_valid():
                data=formset_request.cleaned_data
                for i in range(num+1):
                    plus_str='plus_'+str(i)
                    minus_str='minus_'+str(i)
                    change_str='change_'+str(i)
                    if plus_str in request.POST:
                        temp={'title':'Timer','hour':'00','min':'00','sec':'00'}
                        data.insert(i,temp)
                    if minus_str in request.POST and num>1:
                        del data[i-1]
                    if change_str in request.POST:
                        data[i],data[i-1]=data[i-1],data[i]
                for i in range (num+1):
                    try:
                        hour=data[i]['hour']
                        min=data[i]['min']
                        sec=data[i]['sec']
                        data[i]['hour']=setfig(hour)
                        data[i]['min']=setfig(min)
                        data[i]['sec']=setfig(sec)
                    except:
                        pass
                FormSet=forms.modelformset_factory(
                    Timer,
                    form=TimerCreateForm,
                    extra=num,
                )
                params['TimerForm']=FormSet(initial=data)
    return render(request,'timer/menu.html',params)

def timer_redirect(request):
    return redirect(to='/timer/main/1')

def timer(request,num=1):
    TimerCreateFormSet=forms.modelformset_factory(
        Timer,
        form=TimerCreateForm,
        extra=1,
    )
    params={
        'TitleForm':TitleForm(initial={'title':'Title','hour':'時','min':'分','sec':'秒','sound':'Sound'}),
        'TimerForm':TimerCreateFormSet(
            initial=[{'title':'Timer','hour':'00','min':'00','sec':'00'}],
            ),
        'num':num,
        'plus':num+1,
        'minus':num-1,
        #'args':{'title':'Timer','hour':1,'min':0,'sec':0},
    }
    if (request.method=='POST'):
        if 'clear' in request.POST:
            pass
        else:
            modelformset=forms.modelformset_factory(
                Timer,
                form=TimerCreateForm,
                extra=int(num),
            )
            formset_request=modelformset(request.POST)
            #print(formset_request.errors)
            if formset_request.is_valid():
                data=formset_request.cleaned_data
                for i in range(num+1):
                    plus_str='plus_'+str(i)
                    minus_str='minus_'+str(i)
                    change_str='change_'+str(i)
                    if plus_str in request.POST:
                        temp={'title':'Timer','hour':'00','min':'00','sec':'00'}
                        data.insert(i,temp)
                    if minus_str in request.POST and num>1:
                        del data[i-1]
                    if change_str in request.POST:
                        data[i],data[i-1]=data[i-1],data[i]

                
                for i in range (num+1):
                    try:
                        hour=data[i]['hour']
                        min=data[i]['min']
                        sec=data[i]['sec']
                        data[i]['hour']=setfig(hour)
                        data[i]['min']=setfig(min)
                        data[i]['sec']=setfig(sec)
                    except:
                        pass
                
                FormSet=forms.modelformset_factory(
                    Timer,
                    form=TimerCreateForm,
                    extra=num,
                )
                params['TimerForm']=FormSet(initial=data)
    return render(request,'timer/timer.html',params)

def setfig(num):
    num=int(num)
    #print(num)
    if(num==0):
        res='00'
    elif(num<10):
        res=str('0'+str(num))
    else:
        res=str(num)
    #print(res)
    return res

class Create_account(CreateView):
    def post(self, request, *args, **kwargs):
        form = UserCreateForm(data=request.POST)
        params={
            'form':form,
        }
        if form.is_valid():
            form.save()
            #フォームから'username'を読み取る
            username = form.cleaned_data.get('username')
            #フォームから'password'を読み取る
            password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=password)
            login(request, user)
            return redirect(to='/timer')
        return render(request, 'timer/create.html', params)

    def get(self, request, *args, **kwargs):
        form = UserCreateForm()
        params={
            'form':form,
        }
        return  render(request, 'timer/create.html', params)

class Account_login(View):
    def post(self,request,*args,**kwargs):
        form=LoginForm(data=request.POST)
        params={
            'form':form,
        }
        if form.is_valid():
            username=form.cleaned_data.get('username')
            user=User.objects.get(username=username)
            login(request,user)
            return redirect(to='/timer')
        return render(request,'timer/login.html',params)
    
    def get(self,request,*args,**kwargs):
        form=LoginForm(request.POST)
        params={
            'form':form,
        }
        return render(request,'timer/login.html',params)

class Account_logout(View):
    def get(self,request,*args,**kwargs):
        logout(request)
        redirect(to='timer/main')
        form=LoginForm()
        params={
            'form':form,
        }
        return render(request,'timer/login.html',params)




account_login=Account_login.as_view()
create_account = Create_account.as_view()
account_logout=Account_logout.as_view()



        


# Create your views here.




def fig(i):
    if i==0:
        return "00"
    elif i<10:
        return "0"+str(i)
    else:
        return str(i)
Number=[]
for i in range(60):
    Number.append((fig(i),fig(i)))